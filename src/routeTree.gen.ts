/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as SignoutImport } from './routes/signout';
import { Route as ChatImport } from './routes/chat';
import { Route as AboutImport } from './routes/about';
import { Route as IndexImport } from './routes/index';

// Create/Update Routes

const SignoutRoute = SignoutImport.update({
  id: '/signout',
  path: '/signout',
  getParentRoute: () => rootRoute,
} as any);

const ChatRoute = ChatImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => rootRoute,
} as any);

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/about': {
      id: '/about';
      path: '/about';
      fullPath: '/about';
      preLoaderRoute: typeof AboutImport;
      parentRoute: typeof rootRoute;
    };
    '/chat': {
      id: '/chat';
      path: '/chat';
      fullPath: '/chat';
      preLoaderRoute: typeof ChatImport;
      parentRoute: typeof rootRoute;
    };
    '/signout': {
      id: '/signout';
      path: '/signout';
      fullPath: '/signout';
      preLoaderRoute: typeof SignoutImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/about': typeof AboutRoute;
  '/chat': typeof ChatRoute;
  '/signout': typeof SignoutRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/about': typeof AboutRoute;
  '/chat': typeof ChatRoute;
  '/signout': typeof SignoutRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/about': typeof AboutRoute;
  '/chat': typeof ChatRoute;
  '/signout': typeof SignoutRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/about' | '/chat' | '/signout';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/about' | '/chat' | '/signout';
  id: '__root__' | '/' | '/about' | '/chat' | '/signout';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AboutRoute: typeof AboutRoute;
  ChatRoute: typeof ChatRoute;
  SignoutRoute: typeof SignoutRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ChatRoute: ChatRoute,
  SignoutRoute: SignoutRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/chat",
        "/signout"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/chat": {
      "filePath": "chat.tsx"
    },
    "/signout": {
      "filePath": "signout.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
